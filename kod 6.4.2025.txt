proces:
1) kreirane baze
2) kreiran api
3) kreirana stranica registacija/prijava korisnika
4) kreiran dashboard
5) kreiran upis prihoda/troškova
6) kreirani grafovi za prikaz troškova po kategorijama, financijski pregled (saldo, ukupni trošak, ukupni prihod) te za mjesečnu usporedbu
7) kreiran pregled budžeta
8) kreirani ponavljajući troškovi/prihodi
9) kreiran da se za svaki pojedinačno mjesec može pogledati financije
10)kreiran graf za mjesečnu usporedbu


Ovako, ja sam učenik 4. razreda Tehničke škole Ruđera Boškovića u Zagrebu, smjer tehničar za računalstvo. Ovo mi je zadnja godina i dobio sam zadatak napraviti završni rad. Moja tema završnog rada je Web aplikacija za vođenje osobnih financija. Opis: Aplikacija koja omogućava korisnicima praćenje prihoda i troškova, kreiranje budžeta i prikaz statistike kroz grafove. 
Aplikacija bi mogla imati autentifikaciju korisnika i pohranu podataka na serveru.  
Dakle, mora se implementirati da korinsik unese prihode i svoje troškove, te bi se trebali napraviti razni izračuni i statistika kroz grafove. Uglavno sve što treba jednom čovjeku, kao recimo bankarska aplikacija.
Tehnologije koje se mogu koristiti: HTML, CSS, JavaScript, Node.js/Express, MySQL.
Aplikacija omogućava korisnicima da:
✅ Unesu prihode i troškove (iznos, datum, kategorija)
✅ Pregledaju ukupne financije (saldo, ukupan prihod, ukupni trošak)
✅ Prikazuju podatke kroz grafove (mjesečni troškovi, prihodi po kategoriji)
✅ Kreiraju budžet i prate potrošnju u odnosu na njega
✅ Imaju korisnički račun (registracija i prijava)

2. Nefunkcionalni zahtjevi
🔹 Brzina i jednostavnost – Aplikacija mora biti brza i laka za korištenje
🔹 Responzivnost – Ispravan prikaz na mobitelima i računalima
🔹 Sigurnost – Pohrana lozinki mora biti sigurna (hashing)
🔹 Pohrana podataka – Koristi se baza podataka (MySQL)


👤 Korisnik – Može se registrirati, unositi podatke i pregledavati statistiku.
Aplikacija je podijeljena na tri glavne komponente:
✅ Frontend – HTML, CSS, JavaScript (prikaz korisničkog sučelja)
✅ Backend – Node.js/Express (API za obradu podataka)
✅ Baza podataka – MongoDB/MySQL (pohrana korisničkih podataka, prihoda i troškova)

📡 Kako sve funkcionira?

Korisnik unosi prihode/troškove kroz sučelje.

Podaci se šalju na backend (Node.js/Express).

Backend obrađuje podatke i sprema ih u bazu.

Korisnik može pregledati statistiku i grafove (dohvaćanje podataka iz baze).

2. ER dijagram baze podataka (ako koristimo MySQL)
Tablice u bazi:

korisnici (id, ime, email, lozinka)

prihodi (id, korisnik_id, iznos, datum, kategorija)

troškovi (id, korisnik_id, iznos, datum, kategorija)

budžet (id, korisnik_id, iznos, kategorija, mjesec)
3. Dijagram slučajeva upotrebe
🟢 Korisnik može:

Registrirati se i prijaviti

Unijeti prihod/trošak

Pregledati ukupne financije

Postaviti budžet

Pregledati statistiku u obliku grafova

4. Mockupi korisničkog sučelja (UI/UX)
Početna stranica – Prijava/registracija

Dashboard – Pregled stanja računa, grafovi, opcije unosa

Unos prihoda/troškova – Jednostavna forma

Budžetiranje – Unos budžeta po kategorijama



instalirao sam node.js i xampp za mysql, express također, visual studio code, postman


u xampuu u phpmyadmin baze se zovu financije_db a mysql kod koji sam ubacio je
-- Kreiranje tablice korisnika
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL
);

-- Kreiranje tablice za prihode
CREATE TABLE income (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  amount DECIMAL(10,2),
  description VARCHAR(255),
  date DATE,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Kreiranje tablice za troškove
CREATE TABLE expenses (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  amount DECIMAL(10,2),
  description VARCHAR(255),
  date DATE,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE budgets (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  category VARCHAR(50),
  amount DECIMAL(10,2),
  month VARCHAR(7), -- primjer: "2025-04"
  FOREIGN KEY (user_id) REFERENCES users(id)
);


ALTER TABLE expenses 
  ADD COLUMN IF NOT EXISTS recurrence_interval VARCHAR(20),
  ADD COLUMN IF NOT EXISTS recurrence_end_date DATE;
ALTER TABLE expenses
  MODIFY COLUMN is_recurring BOOLEAN DEFAULT FALSE;


models/budegt.js
const db = require('../db');

const Budget = {
  async create(userId, category, amount, month) {
    const [result] = await db.execute(
      'INSERT INTO budgets (user_id, category, amount, month) VALUES (?, ?, ?, ?)',
      [userId, category, amount, month]
    );
    return result;
  },

  async findByUserId(userId) {
    const [rows] = await db.execute(
      'SELECT * FROM budgets WHERE user_id = ? ORDER BY month DESC, category',
      [userId]
    );
    return rows;
  },

  async update(id, userId, amount) {
    const [result] = await db.execute(
      'UPDATE budgets SET amount = ? WHERE id = ? AND user_id = ?',
      [amount, id, userId]
    );
    return result;
  },

  async deleteById(id, userId) {
    const [result] = await db.execute(
      'DELETE FROM budgets WHERE id = ? AND user_id = ?',
      [id, userId]
    );
    return result;
  },

  async getByMonth(userId, month) {
    const [rows] = await db.execute(
      'SELECT * FROM budgets WHERE user_id = ? AND month = ?',
      [userId, month]
    );
    return rows;
  }
};

module.exports = Budget;

models/expenses.js
const db = require('../db');

const Expense = {
  // Kreiraj novi trošak
  async create(userId, amount, description, date, category, isRecurring = false, recurrenceInterval = null, recurrenceEndDate = null) {
    const [result] = await db.execute(
      `INSERT INTO expenses 
      (user_id, amount, description, date, category, is_recurring, recurrence_interval, recurrence_end_date) 
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [userId, amount, description, date, category, isRecurring, recurrenceInterval, recurrenceEndDate]
    );
    return result;
  },

  // Dohvati sve troškove korisnika
  async findByUserId(userId) {
    const [rows] = await db.execute(
      'SELECT * FROM expenses WHERE user_id = ? ORDER BY date DESC',
      [userId]
    );
    return rows;
  },

  // Dohvati troškove korisnika za određeni mjesec
  async findByUserIdAndMonth(userId, month) {
    const [rows] = await db.execute(
      `SELECT * FROM expenses 
      WHERE user_id = ? AND DATE_FORMAT(date, '%Y-%m') = ? 
      ORDER BY date DESC`,
      [userId, month]
    );
    return rows;
  },

  // Dohvati ponavljajuće troškove
  async getRecurringExpenses(userId) {
    const [rows] = await db.execute(
      `SELECT * FROM expenses 
      WHERE user_id = ? AND is_recurring = TRUE 
      AND (recurrence_end_date IS NULL OR recurrence_end_date >= CURDATE())
      ORDER BY date DESC`,
      [userId]
    );
    return rows;
  },

  // Dohvati ukupne troškove po kategorijama za određeni mjesec
  async getTotalByCategory(userId, month) {
    const [rows] = await db.execute(
      `SELECT category, SUM(amount) as total 
      FROM expenses 
      WHERE user_id = ? AND DATE_FORMAT(date, '%Y-%m') = ?
      GROUP BY category`,
      [userId, month]
    );
    return rows;
  },

  // Dohvati mjesečne troškove korisnika za zadani broj mjeseci
  async getMonthlyExpenses(userId, months) {
    const [rows] = await db.execute(
      `SELECT 
        DATE_FORMAT(date, '%Y-%m') as month, 
        SUM(amount) as total 
      FROM expenses 
      WHERE user_id = ? 
      GROUP BY DATE_FORMAT(date, '%Y-%m') 
      ORDER BY month DESC 
      LIMIT ?`,
      [userId, parseInt(months)]
    );
    return rows;
  },

  // Obriši trošak prema ID-u
  async deleteById(id, userId) {
    const [result] = await db.execute(
      'DELETE FROM expenses WHERE id = ? AND user_id = ?',
      [id, userId]
    );
    return result;
  },

  // Ažuriraj trošak
  async update(id, userId, data) {
    const [result] = await db.execute(
      `UPDATE expenses SET 
        amount = ?, 
        description = ?, 
        date = ?, 
        category = ?,
        is_recurring = ?,
        recurrence_interval = ?,
        recurrence_end_date = ?
      WHERE id = ? AND user_id = ?`,
      [
        data.amount,
        data.description,
        data.date,
        data.category,
        data.isRecurring,
        data.recurrenceInterval,
        data.recurrenceEndDate,
        id,
        userId
      ]
    );
    return result;
  }
};

module.exports = Expense;

models/income.js
const db = require('../db');

class Income {
  // Kreiraj novi prihod
  static async create(userId, amount, description, date, isRecurring = false, recurrenceInterval = null, recurrenceEndDate = null) {
    const [result] = await db.execute(
      `INSERT INTO income 
      (user_id, amount, description, date, is_recurring, recurrence_interval, recurrence_end_date) 
      VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [userId, amount, description, date, isRecurring, recurrenceInterval, recurrenceEndDate]
    );
    return result;
  }

  // Dohvati sve prihode korisnika
  static async findByUserId(userId) {
    const [rows] = await db.execute(
      'SELECT * FROM income WHERE user_id = ? ORDER BY date DESC',
      [userId]
    );
    return rows;
  }

  // Dohvati prihode korisnika za određeni mjesec
  static async findByUserIdAndMonth(userId, month) {
    const [rows] = await db.execute(
      `SELECT * FROM income 
      WHERE user_id = ? AND DATE_FORMAT(date, '%Y-%m') = ? 
      ORDER BY date DESC`,
      [userId, month]
    );
    return rows;
  }

  // Dohvati ponavljajuće prihode
  static async getRecurringIncome(userId) {
    const [rows] = await db.execute(
      `SELECT * FROM income 
      WHERE user_id = ? AND is_recurring = TRUE 
      AND (recurrence_end_date IS NULL OR recurrence_end_date >= CURDATE())
      ORDER BY date DESC`,
      [userId]
    );
    return rows;
  }

  // Obriši prihod prema ID-u
  static async deleteById(id, userId) {
    const [result] = await db.execute(
      'DELETE FROM income WHERE id = ? AND user_id = ?',
      [id, userId]
    );
    return result;
  }

  // Ažuriraj prihod
  static async update(id, userId, data) {
    const [result] = await db.execute(
      `UPDATE income SET 
        amount = ?, 
        description = ?, 
        date = ?,
        is_recurring = ?,
        recurrence_interval = ?,
        recurrence_end_date = ? 
      WHERE id = ? AND user_id = ?`,
      [
        data.amount,
        data.description,
        data.date,
        data.isRecurring,
        data.recurrenceInterval,
        data.recurrenceEndDate,
        id,
        userId
      ]
    );
    return result;
  }

  // Dohvati mjesečne prihode
  static async getMonthlyIncome(userId, months) {
    const [rows] = await db.execute(
      `SELECT 
        DATE_FORMAT(date, '%Y-%m') as month, 
        SUM(amount) as total 
      FROM income 
      WHERE user_id = ? 
      GROUP BY DATE_FORMAT(date, '%Y-%m') 
      ORDER BY month DESC 
      LIMIT ?`,
      [userId, parseInt(months)]
    );
    return rows;
  }
}

module.exports = Income;

models/user.js
const db = require('../db');

class User {
  static async create(username, password) {
    const [result] = await db.execute(
      'INSERT INTO users (username, password) VALUES (?, ?)',
      [username, password]
    );
    return result;
  }

  static async findByUsername(username) {
    const [rows] = await db.execute(
      'SELECT * FROM users WHERE username = ?',
      [username]
    );
    return rows[0];
  }

  static async findAll() {
    const [rows] = await db.execute(
      'SELECT id, username FROM users'
    );
    return rows;
  }

  static async delete(id) {
    const [result] = await db.execute(
      'DELETE FROM users WHERE id = ?',
      [id]
    );
    return result;
  }
}

module.exports = User;

routes/budgets.js
const express = require('express');
const router = express.Router();
const Budget = require('../models/budget');
const { authenticate } = require('./users');

// Dohvati sve budžete za korisnika
router.get('/', authenticate, async (req, res) => {
  try {
    const budgets = await Budget.findByUserId(req.user.id);
    res.json(budgets);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Dodaj novi budžet
router.post('/', authenticate, async (req, res) => {
  try {
    const { category, amount, month } = req.body;
    
    if (!category || !amount || !month) {
      return res.status(400).json({ error: 'Sva polja su obavezna' });
    }

    await Budget.create(req.user.id, category, amount, month);
    res.json({ message: 'Budžet uspješno dodan!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Ažuriraj budžet
router.put('/:id', authenticate, async (req, res) => {
  try {
    const { amount } = req.body;
    await Budget.update(req.params.id, req.user.id, amount);
    res.json({ message: 'Budžet ažuriran!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Obriši budžet
router.delete('/:id', authenticate, async (req, res) => {
  try {
    await Budget.deleteById(req.params.id, req.user.id);
    res.json({ message: 'Budžet obrisan!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

module.exports = router;

routes/expenses.js
const express = require('express');
const router = express.Router();
const Expense = require('../models/expenses');
const { authenticate } = require('./users');

// Dohvati sve troškove korisnika
router.get('/', authenticate, async (req, res) => {
  try {
    const { month } = req.query;
    let expenses;
    
    if (month) {
      expenses = await Expense.findByUserIdAndMonth(req.user.id, month);
    } else {
      expenses = await Expense.findByUserId(req.user.id);
    }
    
    res.json(expenses);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Dohvati ponavljajuće troškove
router.get('/recurring', authenticate, async (req, res) => {
  try {
    const expenses = await Expense.getRecurringExpenses(req.user.id);
    res.json(expenses);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Dohvati mjesečne troškove
router.get('/monthly', authenticate, async (req, res) => {
  try {
    const { months = 3 } = req.query;
    const monthlyExpenses = await Expense.getMonthlyExpenses(req.user.id, months);
    res.json(monthlyExpenses);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Dohvati troškove po kategorijama
router.get('/by-category', authenticate, async (req, res) => {
  try {
    const { month } = req.query;
    
    if (!month) {
      return res.status(400).json({ error: 'Mjesec je obavezan' });
    }
    
    const expensesByCategory = await Expense.getTotalByCategory(req.user.id, month);
    res.json(expensesByCategory);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Dodaj novi trošak
router.post('/', authenticate, async (req, res) => {
  try {
    const { amount, description, date, category, isRecurring, recurrenceInterval, recurrenceEndDate } = req.body;
    
    if (!amount || !date || !category) {
      return res.status(400).json({ error: 'Iznos, datum i kategorija su obavezni' });
    }
    
    await Expense.create(
      req.user.id, 
      amount, 
      description, 
      date, 
      category, 
      isRecurring, 
      recurrenceInterval, 
      recurrenceEndDate
    );
    res.json({ message: 'Trošak uspješno dodan!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Obriši trošak
router.delete('/:id', authenticate, async (req, res) => {
  try {
    const { id } = req.params;
    
    await Expense.deleteById(id, req.user.id);
    res.json({ message: 'Trošak obrisan!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Ažuriraj trošak
router.put('/:id', authenticate, async (req, res) => {
  try {
    const { id } = req.params;
    const { amount, description, date, category, isRecurring, recurrenceInterval, recurrenceEndDate } = req.body;
    
    await Expense.update(id, req.user.id, {
      amount,
      description,
      date,
      category,
      isRecurring,
      recurrenceInterval,
      recurrenceEndDate
    });
    res.json({ message: 'Trošak ažuriran!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

module.exports = router;

routes/income.js
const express = require('express');
const router = express.Router();
const Income = require('../models/income');
const Expense = require('../models/expenses');  // Assuming you have an expense model
const { authenticate } = require('./users');
const db = require('../db');  // Assuming you're using a database connection like MySQL or PostgreSQL

// Fetch all incomes for the user
router.get('/', authenticate, async (req, res) => {
  try {
    const { month } = req.query;
    let incomes;
    
    if (month) {
      incomes = await Income.findByUserIdAndMonth(req.user.id, month);
    } else {
      incomes = await Income.findByUserId(req.user.id);
    }
    
    res.json(incomes);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Fetch recurring incomes
router.get('/recurring', authenticate, async (req, res) => {
  try {
    const incomes = await Income.getRecurringIncome(req.user.id);
    res.json(incomes);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Add a new income
router.post('/', authenticate, async (req, res) => {
  try {
    const { amount, description, date, isRecurring, recurrenceInterval, recurrenceEndDate } = req.body;
    
    if (!amount || !date) {
      return res.status(400).json({ error: 'Amount and date are required' });
    }
    
    await Income.create(
      req.user.id, 
      amount, 
      description, 
      date, 
      isRecurring, 
      recurrenceInterval, 
      recurrenceEndDate
    );
    res.status(201).json({ message: 'Income added successfully!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Delete an income
router.delete('/:id', authenticate, async (req, res) => {
  try {
    const { id } = req.params;
    await Income.deleteById(id, req.user.id);
    res.json({ message: 'Income deleted!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Update an income
router.put('/:id', authenticate, async (req, res) => {
  try {
    const { id } = req.params;
    const { amount, description, date, isRecurring, recurrenceInterval, recurrenceEndDate } = req.body;
    
    await Income.update(id, req.user.id, {
      amount,
      description,
      date,
      isRecurring,
      recurrenceInterval,
      recurrenceEndDate
    });
    res.json({ message: 'Income updated!' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Fetch monthly income
router.get('/monthly', authenticate, async (req, res) => {
  try {
    const { months = 12 } = req.query;
    const monthlyIncome = await Income.getMonthlyIncome(req.user.id, months);
    res.json(monthlyIncome);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Fetch monthly summary of income and expenses
router.get('/summary', authenticate, async (req, res) => {
  try {
    const { month } = req.query;
    
    if (!month) {
      return res.status(400).json({ error: 'Month is required' });
    }
    
    // Fetch income for the given month
    const incomes = await Income.findByUserIdAndMonth(req.user.id, month);
    
    // Fetch expenses for the given month
    const expenses = await Expense.findByUserIdAndMonth(req.user.id, month);
    
    // Calculate total income
    const totalIncome = incomes.reduce((sum, inc) => sum + parseFloat(inc.amount), 0);
    
    // Calculate total expenses
    const totalExpenses = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount), 0);
    
    // Calculate balance
    const balance = totalIncome - totalExpenses;
    
    // Return the results
    res.json({
      income: totalIncome,
      expenses: totalExpenses,
      balance: balance
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// New route to fetch all months with transactions
router.get('/transactions/months', authenticate, async (req, res) => {
  try {
    const { user_id } = req.query;
    
    if (!user_id) {
      return res.status(400).json({ error: 'user_id is required' });
    }

    const [incomeMonths, expenseMonths] = await Promise.all([
      db.execute(
        `SELECT DISTINCT DATE_FORMAT(date, '%Y-%m') as month 
         FROM income WHERE user_id = ? 
         ORDER BY month DESC`,
        [user_id]
      ),
      db.execute(
        `SELECT DISTINCT DATE_FORMAT(date, '%Y-%m') as month 
         FROM expenses WHERE user_id = ? 
         ORDER BY month DESC`,
        [user_id]
      )
    ]);

    // Combine and remove duplicates
    const months = new Set([
      ...incomeMonths[0].map(item => item.month),
      ...expenseMonths[0].map(item => item.month)
    ]);

    res.json(Array.from(months).sort().reverse());
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

// Fetch data for monthly comparison
router.get('/transactions/comparison', authenticate, async (req, res) => {
  try {
    const { user_id } = req.query;
    
    if (!user_id) {
      return res.status(400).json({ error: 'user_id is required' });
    }

    const [monthlyIncome, monthlyExpenses] = await Promise.all([
      db.execute(
        `SELECT 
          DATE_FORMAT(date, '%Y-%m') as month, 
          SUM(amount) as total 
         FROM income 
         WHERE user_id = ? 
         GROUP BY DATE_FORMAT(date, '%Y-%m') 
         ORDER BY month`,
        [user_id]
      ),
      db.execute(
        `SELECT 
          DATE_FORMAT(date, '%Y-%m') as month, 
          SUM(amount) as total 
         FROM expenses 
         WHERE user_id = ? 
         GROUP BY DATE_FORMAT(date, '%Y-%m') 
         ORDER BY month`,
        [user_id]
      )
    ]);

    // Combine the data
    const comparisonData = {};
    
    monthlyIncome[0].forEach(item => {
      comparisonData[item.month] = {
        ...comparisonData[item.month],
        income: parseFloat(item.total)
      };
    });
    
    monthlyExpenses[0].forEach(item => {
      comparisonData[item.month] = {
        ...comparisonData[item.month],
        expenses: parseFloat(item.total)
      };
    });

    // Transform to an array of objects
    const result = Object.keys(comparisonData).map(month => ({
      month,
      income: comparisonData[month].income || 0,
      expenses: comparisonData[month].expenses || 0
    })).sort((a, b) => a.month.localeCompare(b.month));

    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;

routes/users.js
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const router = express.Router();
const User = require('../models/user');

const SECRET = process.env.JWT_SECRET || 'tajna_lozinka';
const EXPIRES_IN = process.env.JWT_EXPIRES_IN || '1h';

// Middleware za autentifikaciju
const authenticate = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      return res.status(401).json({ error: 'Niste prijavljeni' });
    }

    const decoded = await jwt.verify(token, SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    if (err.name === 'TokenExpiredError') {
      return res.status(401).json({ error: 'Token je istekao' });
    }
    return res.status(403).json({ error: 'Nevažeći token' });
  }
};

// Registracija korisnika
router.post('/register', async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: 'Sva polja su obavezna' });
    }

    if (password.length < 6) {
      return res.status(400).json({ error: 'Lozinka mora imati najmanje 6 znakova' });
    }

    const existingUser = await User.findByUsername(username);
    if (existingUser) {
      return res.status(400).json({ error: 'Korisničko ime je zauzeto' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    await User.create(username, hashedPassword);

    res.status(201).json({ message: 'Korisnik uspješno registriran' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Prijava korisnika
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    const user = await User.findByUsername(username);
    if (!user) {
      return res.status(401).json({ error: 'Neispravni podaci za prijavu' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: 'Neispravni podaci za prijavu' });
    }

    const token = jwt.sign(
      { id: user.id, username: user.username },
      SECRET,
      { expiresIn: EXPIRES_IN }
    );

    res.json({
      message: 'Uspješna prijava',
      token,
      userId: user.id,
      username: user.username,
      expiresIn: EXPIRES_IN
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Greška na serveru' });
  }
});

// Dohvat korisničkog profila
router.get('/profile', authenticate, (req, res) => {
  res.json({ user: req.user });
});

module.exports = { router, authenticate };

.env
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=financije_db
PORT=3000
JWT_SECRET=vaš_jako_sigurni_ključ_123!

app.js
const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const { authenticate } = require('./routes/users');

// Middleware
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
app.use(cors());

// Rute
const userRoutes = require('./routes/users').router;
const incomeRoutes = require('./routes/income');
const expensesRoutes = require('./routes/expenses');
const budgetRoutes = require('./routes/budgets');

app.use('/users', userRoutes);
app.use('/income', authenticate, incomeRoutes);
app.use('/expenses', authenticate, expensesRoutes);
app.use('/budgets', authenticate, budgetRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Došlo je do greške na serveru' });
});

// Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server pokrenut na portu ${PORT}`);
});

db.js
const mysql = require('mysql2/promise');
require('dotenv').config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  timezone: '+00:00' // Postavi UTC vremensku zonu
});

// Poboljšana funkcija za testiranje veze
async function testConnection() {
  let connection;
  try {
    connection = await pool.getConnection();
    await connection.ping();
    console.log('Uspješno povezan s MySQL bazom!');
  } catch (err) {
    console.error('Greška pri povezivanju s bazom:', err);
    process.exit(1);
  } finally {
    if (connection) connection.release();
  }
}

// Testiraj vezu prilikom pokretanja
testConnection();

// Pravilno zatvaranje veza prilikom zaustavljanja aplikacije
process.on('SIGINT', async () => {
  try {
    await pool.end();
    console.log('MySQL veze zatvorene');
    process.exit(0);
  } catch (err) {
    console.error('Greška pri zatvaranju veza:', err);
    process.exit(1);
  }
});

module.exports = pool;

public/css/style.css
:root {
  --primary: #3498db;
  --primary-dark: #2980b9;
  --secondary: #2ecc71;
  --secondary-dark: #27ae60;
  --danger: #e74c3c;
  --danger-dark: #c0392b;
  --warning: #f39c12;
  --warning-dark: #e67e22;
  --gray: #95a5a6;
  --gray-dark: #7f8c8d;
  --light: #ecf0f1;
  --dark: #2c3e50;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  background-color: #f5f7fa;
  color: var(--dark);
}

a {
  text-decoration: none;
  color: var(--primary);
}

a:hover {
  text-decoration: underline;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.btn {
  display: inline-block;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.3s;
}

.btn-primary {
  background-color: var(--primary);
  color: white;
}

.btn-primary:hover {
  background-color: var(--primary-dark);
}

.btn-secondary {
  background-color: var(--secondary);
  color: white;
}

.btn-secondary:hover {
  background-color: var(--secondary-dark);
}

.btn-danger {
  background-color: var(--danger);
  color: white;
}

.btn-danger:hover {
  background-color: var(--danger-dark);
}

.btn-warning {
  background-color: var(--warning);
  color: white;
}

.btn-warning:hover {
  background-color: var(--warning-dark);
}

.card {
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}

.form-control {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 16px;
}

.alert {
  padding: 15px;
  border-radius: 4px;
  margin-bottom: 20px;
}

.alert-success {
  background-color: #d4edda;
  color: #155724;
}

.alert-error {
  background-color: #f8d7da;
  color: #721c24;
}

.hidden {
  display: none;
}

/* Responsivnost */
@media (max-width: 768px) {
  .container {
    padding: 0 10px;
  }
  
  .btn {
    padding: 8px 15px;
    font-size: 14px;
  }
}

.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
}

.modal-content {
  background-color: white;
  margin: 5% auto;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-width: 800px;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.form-actions {
  margin-top: 20px;
  text-align: right;
}

public/js/auth.js
// Provjeri je li korisnik prijavljen
function checkAuth() {
    const token = localStorage.getItem('token');
    const userId = localStorage.getItem('userId');
    
    if (!token || !userId) {
      window.location.href = 'login.html';
      return false;
    }
    return true;
  }
  
  // Odjavi korisnika
  function logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('userId');
    localStorage.removeItem('username');
    window.location.href = 'login.html';
  }
  
  // Dohvati auth header za fetch zahtjeve
  function getAuthHeader() {
    const token = localStorage.getItem('token');
    return {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
  }
  
  // Prikazi korisniku obavijest
  function showAlert(message, type = 'success') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type}`;
    alertDiv.textContent = message;
    
    document.body.prepend(alertDiv);
    
    setTimeout(() => {
      alertDiv.remove();
    }, 5000);
  }

  public/js/dashboard.js
  document.addEventListener('DOMContentLoaded', async () => {
  if (!checkAuth()) return;
  
  let financeChart = null;
  let budgetChart = null;
  let categoriesChart = null;
  let comparisonChart = null;
  
  let currentDate = new Date();
  let currentMonth = currentDate.getMonth();
  let currentYear = currentDate.getFullYear();
  let previousMonthData = { income: 0, expenses: 0, balance: 0 };
  let availableMonths = [];
  let currentMonthIndex = 0;

  try {
    document.getElementById('welcomeMessage').textContent = `Dobrodošli, ${localStorage.getItem('username')}!`;
    await loadAvailableMonths();
    
    // Postavi na najnoviji mjesec ako već nismo na nekom od dostupnih mjeseci
    if (availableMonths.length > 0) {
      const currentMonthStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}`;
      currentMonthIndex = availableMonths.indexOf(currentMonthStr);
      
      if (currentMonthIndex === -1) {
        currentMonthIndex = 0;
        const [year, month] = availableMonths[0].split('-');
        currentYear = parseInt(year);
        currentMonth = parseInt(month) - 1;
      }
    }
    
    await loadData();
    updateNavigationButtons();
  } catch (error) {
    console.error('Detalji greške:', error);
    showAlert(`Greška: ${error.message}`, 'error');
    if (error.message.includes('token') || error.message.includes('401')) {
      localStorage.clear();
      window.location.href = 'login.html';
    }
  }

  window.changeMonth = function(offset) {
    const newIndex = currentMonthIndex + offset;
    
    // Provjeri granice
    if (newIndex < 0 || newIndex >= availableMonths.length) return;
    
    currentMonthIndex = newIndex;
    const [year, month] = availableMonths[currentMonthIndex].split('-');
    currentYear = parseInt(year);
    currentMonth = parseInt(month) - 1;
    
    loadData();
    updateNavigationButtons();
  };

  function updateNavigationButtons() {
    const prevButton = document.querySelector('.month-selector button:first-child');
    const nextButton = document.querySelector('.month-selector button:last-child');
    
    // Onemogući gumbe ako nema dostupnih mjeseci
    if (availableMonths.length === 0) {
      prevButton.disabled = true;
      nextButton.disabled = true;
      return;
    }
    
    // Onemogući "Prethodni" ako smo na prvom mjesecu
    prevButton.disabled = currentMonthIndex === 0;
    
    // Onemogući "Sljedeći" ako smo na zadnjem mjesecu
    nextButton.disabled = currentMonthIndex === availableMonths.length - 1;
    
    // Stilovi za onemogućene gumbe
    prevButton.style.opacity = prevButton.disabled ? '0.5' : '1';
    prevButton.style.cursor = prevButton.disabled ? 'not-allowed' : 'pointer';
    nextButton.style.opacity = nextButton.disabled ? '0.5' : '1';
    nextButton.style.cursor = nextButton.disabled ? 'not-allowed' : 'pointer';
  }

  async function loadAvailableMonths() {
    try {
      const response = await fetch(`http://localhost:3000/income/transactions/months?user_id=${localStorage.getItem('userId')}`, {
        headers: getAuthHeader()
      });
      
      if (!response.ok) {
        throw new Error('Greška pri dohvaćanju dostupnih mjeseci');
      }
      
      availableMonths = await response.json();
      
      // Sortira mjesece od najnovijeg prema najstarijem
      availableMonths.sort((a, b) => a.localeCompare(b));

      // <---- NOVO DODANO ---->
      console.log("Dostupni mjeseci:", availableMonths);
      // <---------------------->

    } catch (error) {
      console.error('Greška u loadAvailableMonths:', error);
      throw error;
    }
  }

  async function loadData() {
    try {
      updateMonthDisplay();
      const monthString = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}`;
      
      const [incomesRes, expensesRes, budgetsRes, prevMonthRes] = await Promise.all([
        fetch(`http://localhost:3000/income?user_id=${localStorage.getItem('userId')}&month=${monthString}`, {
          headers: getAuthHeader()
        }),
        fetch(`http://localhost:3000/expenses?user_id=${localStorage.getItem('userId')}&month=${monthString}`, {
          headers: getAuthHeader()
        }),
        fetch(`http://localhost:3000/budgets?user_id=${localStorage.getItem('userId')}&month=${monthString}`, {
          headers: getAuthHeader()
        }),
        fetch(`http://localhost:3000/income/summary?user_id=${localStorage.getItem('userId')}&month=${getPreviousMonthString()}`, {
          headers: getAuthHeader()
        })
      ]);

      if (!incomesRes.ok) {
        throw new Error(`Income API error: ${incomesRes.status} ${await incomesRes.text()}`);
      }
      if (!expensesRes.ok) {
        throw new Error(`Expenses API error: ${expensesRes.status} ${await expensesRes.text()}`);
      }
      if (!budgetsRes.ok) {
        throw new Error(`Budgets API error: ${budgetsRes.status} ${await budgetsRes.text()}`);
      }
      
      let previousMonthData = { income: 0, expenses: 0, balance: 0 };
      if (prevMonthRes.ok) {
        previousMonthData = await prevMonthRes.json();
      }

      const incomes = await incomesRes.json();
      const expenses = await expensesRes.json();
      const budgets = await budgetsRes.json();

      const totalIncome = incomes.reduce((sum, inc) => sum + parseFloat(inc.amount), 0);
      const totalExpenses = expenses.reduce((sum, exp) => sum + parseFloat(exp.amount), 0);
      const balance = totalIncome - totalExpenses;
      
      document.getElementById('totalIncome').textContent = totalIncome.toFixed(2) + ' €';
      document.getElementById('totalExpenses').textContent = totalExpenses.toFixed(2) + ' €';
      document.getElementById('balance').textContent = balance.toFixed(2) + ' €';
      
      const balanceChange = balance - previousMonthData.balance;
      const balanceChangeElement = document.getElementById('balanceChange');
      balanceChangeElement.innerHTML = balanceChange > 0 ? 
        `<span style="color: green">↑ ${balanceChange.toFixed(2)} €</span>` :
        `<span style="color: red">↓ ${Math.abs(balanceChange).toFixed(2)} €</span>`;
      
      createFinanceChart(totalIncome, totalExpenses, balance);
      createBudgetChart(expenses, budgets);
      await loadCategoriesChart(expenses);
      
    } catch (error) {
      console.error('Greška u loadData:', error);
      showAlert(`Greška pri učitavanju podataka: ${error.message}`, 'error');
    }
  }

  function getPreviousMonthString() {
    if (currentMonthIndex < availableMonths.length - 1) {
      return availableMonths[currentMonthIndex + 1];
    }
    const prevDate = new Date(currentYear, currentMonth - 1, 1);
    return `${prevDate.getFullYear()}-${String(prevDate.getMonth() + 1).padStart(2, '0')}`;
  }

  function updateMonthDisplay() {
    const monthNames = ["Siječanj", "Veljača", "Ožujak", "Travanj", "Svibanj", "Lipanj",
                       "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac"];
    document.getElementById('currentMonth').textContent = `${monthNames[currentMonth]} ${currentYear}`;
  }

  function createFinanceChart(totalIncome, totalExpenses, balance) {
    const ctx = document.getElementById('financeChart').getContext('2d');
    
    if (financeChart) {
      financeChart.destroy();
    }
    
    financeChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Prihodi', 'Troškovi', 'Saldo'],
        datasets: [{
          label: 'Financijski pregled',
          data: [totalIncome, totalExpenses, balance],
          backgroundColor: [
            'rgba(75, 192, 192, 0.6)',
            'rgba(255, 99, 132, 0.6)',
            'rgba(54, 162, 235, 0.6)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  }

  function createBudgetChart(expenses, budgets) {
    const ctx = document.getElementById('budgetChart').getContext('2d');
    
    if (budgetChart) {
      budgetChart.destroy();
    }
    
    if (budgets.length === 0) {
      document.getElementById('budgetChart').parentElement.innerHTML = `
        <h2>Pregled budžeta</h2>
        <p>Niste postavili budžete. <a href="budgets.html">Postavite budžete</a> za bolju kontrolu troškova.</p>
      `;
      return;
    }

    const expensesByCategory = {};
    expenses.forEach(exp => {
      if (!expensesByCategory[exp.category]) {
        expensesByCategory[exp.category] = 0;
      }
      expensesByCategory[exp.category] += parseFloat(exp.amount);
    });

    const categories = budgets.map(b => b.category);
    const budgetAmounts = budgets.map(b => b.amount);
    const actualAmounts = categories.map(cat => expensesByCategory[cat] || 0);

    budgetChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: categories,
        datasets: [
          {
            label: 'Budžet',
            data: budgetAmounts,
            backgroundColor: 'rgba(54, 162, 235, 0.6)'
          },
          {
            label: 'Stvarni troškovi',
            data: actualAmounts,
            backgroundColor: 'rgba(255, 99, 132, 0.6)'
          }
        ]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  }

  async function loadCategoriesChart(expenses) {
    const ctx = document.getElementById('categoriesChart').getContext('2d');
    
    if (categoriesChart) {
      categoriesChart.destroy();
    }
    
    const categories = {};
    expenses.forEach(exp => {
      if (!categories[exp.category]) {
        categories[exp.category] = 0;
      }
      categories[exp.category] += parseFloat(exp.amount);
    });
    
    const labels = Object.keys(categories);
    const amounts = Object.values(categories);
    
    categoriesChart = new Chart(ctx, {
      type: 'pie',
      data: {
        labels: labels,
        datasets: [{
          data: amounts,
          backgroundColor: [
            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'
          ]
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'right'
          }
        }
      }
    });
  }

  window.showMonthlyComparison = async function() {
    try {
      const response = await fetch(`http://localhost:3000/income/transactions/comparison?user_id=${localStorage.getItem('userId')}`, {
        headers: getAuthHeader()
      });
      
      if (!response.ok) {
        throw new Error('Greška pri dohvaćanju podataka za usporedbu');
      }
      
      const comparisonData = await response.json();
      
      const labels = comparisonData.map(item => {
        const [year, month] = item.month.split('-');
        const monthNames = ["Sij", "Velj", "Ožu", "Tra", "Svi", "Lip", "Srp", "Kol", "Ruj", "Lis", "Stu", "Pro"];
        return `${monthNames[parseInt(month) - 1]} ${year}`;
      });
      
      const incomeData = comparisonData.map(item => item.income || 0);
      const expensesData = comparisonData.map(item => item.expenses || 0);
      
      const ctx = document.getElementById('comparisonChart').getContext('2d');
      
      if (comparisonChart) {
        comparisonChart.destroy();
      }
      
      comparisonChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Prihodi',
              data: incomeData,
              backgroundColor: 'rgba(75, 192, 192, 0.6)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            },
            {
              label: 'Troškovi',
              data: expensesData,
              backgroundColor: 'rgba(255, 99, 132, 0.6)',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            y: { beginAtZero: true }
          },
          plugins: {
            title: {
              display: true,
              text: 'Mjesečna usporedba prihoda i troškova'
            }
          }
        }
      });
      
      document.getElementById('comparisonModal').style.display = 'block';
    } catch (error) {
      console.error('Greška u showMonthlyComparison:', error);
      showAlert(`Greška pri učitavanju usporedbe: ${error.message}`, 'error');
    }
  };

  window.hideComparisonModal = function() {
    document.getElementById('comparisonModal').style.display = 'none';
  };

  function showAlert(message, type) {
    const alertBox = document.createElement('div');
    alertBox.className = `alert alert-${type}`;
    alertBox.textContent = message;
    document.body.appendChild(alertBox);
    setTimeout(() => {
      alertBox.remove();
    }, 5000);
  }
});


public/js/login.js
document.getElementById('loginForm').addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const username = document.getElementById('username').value;
  const password = document.getElementById('password').value;
  const messageElement = document.getElementById('message');
  
  messageElement.textContent = 'Prijavljujem...';
  messageElement.style.color = 'black';

  try {
    const res = await fetch('http://localhost:3000/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password })
    });

    const data = await res.json();

    if (!res.ok) {
      throw new Error(data.error || 'Neuspješna prijava');
    }

    // Spremi token i korisničke podatke
    localStorage.setItem('token', data.token);
    localStorage.setItem('userId', data.userId);
    localStorage.setItem('username', data.username);

    messageElement.textContent = 'Uspješna prijava! Preusmjeravanje...';
    messageElement.style.color = 'green';

    setTimeout(() => {
      window.location.href = 'dashboard.html';
    }, 1500);
  } catch (error) {
    console.error('Greška pri prijavi:', error);
    messageElement.textContent = error.message;
    messageElement.style.color = 'red';
  }
});

public/js/recurring.js
class RecurringManager {
  static async generateRecurringItems() {
    try {
      const token = localStorage.getItem('token');
      const userId = localStorage.getItem('userId');
      if (!token || !userId) return;
      
      // Dohvati sve aktivne ponavljajuće stavke
      const [expensesRes, incomeRes] = await Promise.all([
        fetch(`http://localhost:3000/expenses/recurring?user_id=${userId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        }),
        fetch(`http://localhost:3000/income/recurring?user_id=${userId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      ]);
      
      if (!expensesRes.ok || !incomeRes.ok) return;
      
      const expenses = await expensesRes.json();
      const income = await incomeRes.json();
      
      // Generiraj nove stavke za ovaj mjesec
      await this.generateItems(expenses, 'expense');
      await this.generateItems(income, 'income');
    } catch (error) {
      console.error('Error generating recurring items:', error);
    }
  }
  
  static async generateItems(items, type) {
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();
    
    for (const item of items) {
      const lastGeneratedDate = new Date(item.date);
      
      if (this.shouldGenerateItem(item, lastGeneratedDate, currentMonth, currentYear)) {
        await this.createNewItem(item, type, currentDate);
      }
    }
  }
  
  static shouldGenerateItem(item, lastGeneratedDate, currentMonth, currentYear) {
    const interval = item.recurrence_interval;
    const endDate = item.recurrence_end_date ? new Date(item.recurrence_end_date) : null;
    
    if (endDate && endDate < new Date()) {
      return false;
    }
    
    switch (interval) {
      case 'monthly':
        return lastGeneratedDate.getMonth() < currentMonth || 
               lastGeneratedDate.getFullYear() < currentYear;
      case 'yearly':
        return lastGeneratedDate.getFullYear() < currentYear;
      case 'weekly':
        const weeksDiff = Math.floor((new Date() - lastGeneratedDate) / (7 * 24 * 60 * 60 * 1000));
        return weeksDiff >= 1;
      case 'daily':
        return lastGeneratedDate.toDateString() !== new Date().toDateString();
      default:
        return false;
    }
  }
  
  static async createNewItem(item, type, currentDate) {
    try {
      const token = localStorage.getItem('token');
      const userId = localStorage.getItem('userId');
      const newDate = new Date(currentDate);
      
      // Postavi na prvi dan u mjesecu za mjesečno ponavljanje
      if (item.recurrence_interval === 'monthly') {
        newDate.setDate(1);
      }
      
      const url = type === 'expense' 
        ? 'http://localhost:3000/expenses' 
        : 'http://localhost:3000/income';
      
      const body = {
        user_id: userId,
        amount: item.amount,
        description: item.description,
        date: newDate.toISOString().split('T')[0],
        is_recurring: false
      };
      
      if (type === 'expense') {
        body.category = item.category;
      }
      
      await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(body)
      });
      
      // Ažuriraj datum zadnjeg generiranja u originalnoj stavci
      await fetch(
        type === 'expense' 
          ? `http://localhost:3000/expenses/${item.id}` 
          : `http://localhost:3000/income/${item.id}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            user_id: userId,
            date: newDate.toISOString().split('T')[0]
          })
        }
      );
    } catch (error) {
      console.error(`Error creating new ${type}:`, error);
    }
  }
}

// Pokreni generiranje prilikom učitavanja dashboarda
document.addEventListener('DOMContentLoaded', () => {
  RecurringManager.generateRecurringItems();
});

public/js/register.js
document.getElementById('registerForm').addEventListener('submit', async function(e) {
    e.preventDefault();
  
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
  
    const res = await fetch('http://localhost:3000/users/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password })
    });
  
    const data = await res.json();
    document.getElementById('message').textContent = data.message || data.error;
  });
  

  public/budgets.html
  <!DOCTYPE html>
<html lang="hr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Upravljanje Budžetima</title>
  <link rel="stylesheet" href="css/style.css">
  <style>
    .okvir {
      max-width: 1000px;
      margin: 2rem auto;
      padding: 2rem;
    }

    .zaglavlje {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }

    .odabir-mjeseca {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }

    th, td {
      padding: 12px 15px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    th {
      background-color: #f8f9fa;
      font-weight: 600;
    }

    tr:hover {
      background-color: #f5f5f5;
    }

    .akcije {
      display: flex;
      gap: 0.5rem;
    }

    button {
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
    }

    .dodaj-gumb {
      background-color: #28a745;
      color: white;
    }

    .uredi-gumb {
      background-color: #ffc107;
      color: #212529;
    }

    .obrisi-gumb {
      background-color: #dc3545;
      color: white;
    }

    .natrag-gumb {
      background-color: #6c757d;
      color: white;
    }

    .forma-okvir {
      background-color: #f8f9fa;
      padding: 1.5rem;
      border-radius: 8px;
      margin-top: 2rem;
    }

    .forma-grupa {
      margin-bottom: 1rem;
    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }

    input, select {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ced4da;
      border-radius: 4px;
    }

    .sakriveno {
      display: none;
    }
  </style>
</head>
<body>
  <div class="okvir">
    <div class="zaglavlje">
      <h1>Upravljanje Budžetima</h1>
      <button class="natrag-gumb" onclick="window.location.href='dashboard.html'">&larr; Povratak</button>
    </div>

    <div class="odabir-mjeseca">
      <label for="mjesec">Odaberi mjesec:</label>
      <input type="month" id="mjesec" onchange="ucitajBudzete()">
      <button class="dodaj-gumb" onclick="prikaziFormuDodavanja()">+ Dodaj Budžet</button>
    </div>

    <div id="tablicaBudzeta">
      <table>
        <thead>
          <tr>
            <th>Kategorija</th>
            <th>Iznos (€)</th>
            <th>Akcije</th>
          </tr>
        </thead>
        <tbody id="listaBudzeta"></tbody>
      </table>
    </div>

    <div id="formaDodavanja" class="forma-okvir sakriveno">
      <h2 id="naslovForme">Dodaj Novi Budžet</h2>
      <form id="formaBudzeta">
        <div class="forma-grupa">
          <label for="kategorija">Kategorija</label>
          <select id="kategorija" required>
            <option value="">Odaberi kategoriju</option>
            <option value="Hrana">Hrana</option>
            <option value="Stanovanje">Stanovanje</option>
            <option value="Prijevoz">Prijevoz</option>
            <option value="Zabava">Zabava</option>
            <option value="Obrazovanje">Obrazovanje</option>
            <option value="Ostalo">Ostalo</option>
          </select>
        </div>

        <div class="forma-grupa">
          <label for="iznos">Iznos (€)</label>
          <input type="number" step="0.01" id="iznos" required>
        </div>

        <div class="akcije">
          <button type="submit" class="dodaj-gumb">Spremi</button>
          <button type="button" class="natrag-gumb" onclick="sakrijFormuDodavanja()">Odustani</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    let trenutniMjesec = '';
    let modUredivanja = false;
    let idZaUredivanje = null;

    document.addEventListener('DOMContentLoaded', () => {
      const sada = new Date();
      trenutniMjesec = `${sada.getFullYear()}-${String(sada.getMonth() + 1).padStart(2, '0')}`;
      document.getElementById('mjesec').value = trenutniMjesec;
      ucitajBudzete();
    });

    async function ucitajBudzete() {
      try {
        const token = localStorage.getItem('token');
        const korisnikId = localStorage.getItem('userId');
        trenutniMjesec = document.getElementById('mjesec').value;

        if (!token || !korisnikId) {
          alert('Niste prijavljeni!');
          window.location.href = 'login.html';
          return;
        }

        const odgovor = await fetch(`http://localhost:3000/budgets?user_id=${korisnikId}&month=${trenutniMjesec}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (!odgovor.ok) {
          throw new Error('Greška pri učitavanju budžeta');
        }

        const budzeti = await odgovor.json();
        prikaziBudzete(budzeti);
      } catch (greska) {
        console.error(greska);
        alert(greska.message);
      }
    }

    function prikaziBudzete(budzeti) {
      const lista = document.getElementById('listaBudzeta');
      lista.innerHTML = '';

      if (budzeti.length === 0) {
        lista.innerHTML = `
          <tr>
            <td colspan="3" style="text-align: center;">
              Nema budžeta za odabrani mjesec. <a href="#" onclick="prikaziFormuDodavanja()">Dodajte novi budžet</a>.
            </td>
          </tr>
        `;
        return;
      }

      budzeti.forEach(b => {
        const red = document.createElement('tr');
        red.innerHTML = `
          <td>${b.category}</td>
          <td>${parseFloat(b.amount).toFixed(2)} €</td>
          <td class="akcije">
            <button class="uredi-gumb" onclick="urediBudzet(${b.id}, '${b.category}', ${b.amount})">Uredi</button>
            <button class="obrisi-gumb" onclick="obrisiBudzet(${b.id})">Obriši</button>
          </td>
        `;
        lista.appendChild(red);
      });
    }

    function prikaziFormuDodavanja(uredi = false, id = null, kategorija = '', iznos = '') {
      modUredivanja = uredi;
      idZaUredivanje = id;

      const forma = document.getElementById('formaDodavanja');
      const naslov = document.getElementById('naslovForme');
      const odabirKategorije = document.getElementById('kategorija');
      const poljeIznos = document.getElementById('iznos');
      const gumbSpremi = forma.querySelector('button[type="submit"]');

      if (modUredivanja) {
        naslov.textContent = 'Uredi Budžet';
        gumbSpremi.textContent = 'Ažuriraj';
        odabirKategorije.value = kategorija;
        poljeIznos.value = iznos;
      } else {
        naslov.textContent = 'Dodaj Novi Budžet';
        gumbSpremi.textContent = 'Spremi';
        odabirKategorije.value = '';
        poljeIznos.value = '';
      }

      document.getElementById('tablicaBudzeta').classList.add('sakriveno');
      forma.classList.remove('sakriveno');
    }

    function sakrijFormuDodavanja() {
      document.getElementById('formaDodavanja').classList.add('sakriveno');
      document.getElementById('tablicaBudzeta').classList.remove('sakriveno');
      modUredivanja = false;
      idZaUredivanje = null;
    }

    document.getElementById('formaBudzeta').addEventListener('submit', async (e) => {
      e.preventDefault();

      const token = localStorage.getItem('token');
      const korisnikId = localStorage.getItem('userId');
      const kategorija = document.getElementById('kategorija').value;
      const iznos = document.getElementById('iznos').value;

      if (!kategorija || !iznos) {
        alert('Molimo popunite sva polja!');
        return;
      }

      try {
        let odgovor;

        if (modUredivanja) {
          odgovor = await fetch(`http://localhost:3000/budgets/${idZaUredivanje}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
              amount: iznos,
              user_id: korisnikId
            })
          });
        } else {
          odgovor = await fetch('http://localhost:3000/budgets', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
              category: kategorija,
              amount: iznos,
              month: trenutniMjesec,
              user_id: korisnikId
            })
          });
        }

        if (!odgovor.ok) {
          throw new Error(modUredivanja ? 'Greška pri ažuriranju budžeta' : 'Greška pri dodavanju budžeta');
        }

        sakrijFormuDodavanja();
        ucitajBudzete();
      } catch (greska) {
        console.error(greska);
        alert(greska.message);
      }
    });

    function urediBudzet(id, kategorija, iznos) {
      prikaziFormuDodavanja(true, id, kategorija, iznos);
    }

    async function obrisiBudzet(id) {
      if (!confirm('Jeste li sigurni da želite obrisati ovaj budžet?')) {
        return;
      }

      try {
        const token = localStorage.getItem('token');
        const korisnikId = localStorage.getItem('userId');

        const odgovor = await fetch(`http://localhost:3000/budgets/${id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            user_id: korisnikId
          })
        });

        if (!odgovor.ok) {
          throw new Error('Greška pri brisanju budžeta');
        }

        ucitajBudzete();
      } catch (greska) {
        console.error(greska);
        alert(greska.message);
      }
    }
  </script>
</body>
</html>

public/dashboard.html
<!DOCTYPE html>
<html lang="hr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Financijski nadzor</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="css/style.css">
  <style>
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 30px;
    }
    
    .month-selector {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .summary-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .card {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      text-align: center;
    }
    
    .card h3 {
      margin-top: 0;
      color: var(--dark);
    }
    
    .card-value {
      font-size: 24px;
      font-weight: bold;
      margin: 10px 0;
    }
    
    .balance { color: var(--primary); }
    .income { color: var(--secondary); }
    .expenses { color: var(--danger); }
    
    .actions {
      display: flex;
      gap: 10px;
      margin-bottom: 30px;
      flex-wrap: wrap;
    }
    
    .chart-container {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .chart-container h2 {
      margin-top: 0;
    }
    
    canvas {
      width: 100% !important;
      max-height: 400px;
    }
    
    /* Stilovi za modal */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 5% auto;
      padding: 20px;
      border-radius: 8px;
      width: 80%;
      max-width: 800px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .form-actions {
      margin-top: 20px;
      text-align: right;
    }
    
    @media (max-width: 768px) {
      .summary-cards {
        grid-template-columns: 1fr;
      }
      
      .actions {
        flex-direction: column;
      }
      
      .actions button {
        width: 100%;
      }
      
      .modal-content {
        width: 95%;
        margin: 10% auto;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="dashboard-header">
      <h1 id="welcomeMessage">Dobrodošli natrag!</h1>
      <button class="btn btn-danger" onclick="logout()">Odjava</button>
    </div>

    <div class="month-selector">
      <button class="btn btn-secondary" onclick="changeMonth(-1)">← Prethodni mjesec</button>
      <h2 id="currentMonth">Travanj 2025</h2>
      <button class="btn btn-secondary" onclick="changeMonth(1)">Sljedeći mjesec →</button>
    </div>

    <div class="actions">
      <button class="btn btn-primary" onclick="showMonthlyComparison()">Mjesečna usporedba</button>
    </div>

    <div class="summary-cards">
      <div class="card">
        <h3>Saldo</h3>
        <div id="balance" class="card-value balance">0.00 €</div>
        <small id="balanceChange"></small>
      </div>
      <div class="card">
        <h3>Ukupni prihodi</h3>
        <div id="totalIncome" class="card-value income">0.00 €</div>
      </div>
      <div class="card">
        <h3>Ukupni troškovi</h3>
        <div id="totalExpenses" class="card-value expenses">0.00 €</div>
      </div>
    </div>

    <div class="actions">
      <button class="btn btn-secondary" onclick="window.location.href='income.html'">Dodaj prihod</button>
      <button class="btn btn-danger" onclick="window.location.href='expenses.html'">Dodaj trošak</button>
      <button class="btn btn-primary" onclick="window.location.href='budgets.html'">Upravljaj budžetima</button>
      <button class="btn btn-warning" onclick="window.location.href='recurring.html'">Ponavljajući troškovi/prihodi</button>
    </div>

    <div class="chart-container">
      <h2>Financijski pregled</h2>
      <canvas id="financeChart"></canvas>
    </div>

    <div class="chart-container">
      <h2>Pregled budžeta</h2>
      <canvas id="budgetChart"></canvas>
    </div>

    <div class="chart-container">
      <h2>Troškovi po kategorijama</h2>
      <canvas id="categoriesChart"></canvas>
    </div>
    
    <!-- Modal za mjesečnu usporedbu -->
    <div id="comparisonModal" class="modal">
      <div class="modal-content">
        <h2>Mjesečna usporedba</h2>
        <canvas id="comparisonChart"></canvas>
        <div class="form-actions">
          <button class="btn btn-secondary" onclick="hideComparisonModal()">Zatvori</button>
        </div>
      </div>
    </div>
  </div>

  <script src="js/auth.js"></script>
  <script src="js/dashboard.js"></script>
  <script>
    function logout() {
      localStorage.clear();
      window.location.href = 'login.html';
    }
  </script>
</body>
</html>

public/expenses.html
<!DOCTYPE html>
<html lang="hr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Troškovi</title>
  <link rel="stylesheet" href="css/style.css">
  <style>
    .container {
      max-width: 800px;
      margin: 2rem auto;
      padding: 2rem;
    }
    
    .form-container {
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 2rem;
    }
    
    .form-group {
      margin-bottom: 1rem;
    }
    
    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    
    input, select {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .recurring-options {
      margin-top: 1rem;
      padding: 1rem;
      background: #f8f9fa;
      border-radius: 4px;
      display: none;
    }
    
    .expense-list {
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .expense-item {
      display: flex;
      justify-content: space-between;
      padding: 1rem 0;
      border-bottom: 1px solid #eee;
      align-items: center;
    }
    
    .expense-item:last-child {
      border-bottom: none;
    }
    
    .expense-info {
      flex: 1;
    }
    
    .expense-amount {
      font-weight: bold;
      color: var(--danger);
    }
    
    .expense-date {
      color: var(--gray-dark);
      font-size: 0.9rem;
    }
    
    .expense-description {
      color: #666;
    }
    
    .expense-category {
      display: inline-block;
      padding: 0.2rem 0.5rem;
      background: #f1c40f;
      border-radius: 12px;
      font-size: 0.8rem;
      color: #333;
    }
    
    .expense-actions {
      margin-left: 1rem;
    }
    
    .recurring-badge {
      display: inline-block;
      padding: 0.2rem 0.5rem;
      background: #9b59b6;
      border-radius: 12px;
      font-size: 0.8rem;
      color: white;
      margin-left: 0.5rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Upravljanje troškovima</h1>
      <button class="btn btn-primary" onclick="window.location.href='dashboard.html'">← Povratak</button>
    </div>
    
    <div class="form-container">
      <h2>Dodaj novi trošak</h2>
      <form id="expenseForm">
        <div class="form-group">
          <label for="amount">Iznos (€)</label>
          <input type="number" step="0.01" id="amount" class="form-control" required>
        </div>
        
        <div class="form-group">
          <label for="category">Kategorija</label>
          <select id="category" class="form-control" required>
            <option value="">Odaberi kategoriju</option>
            <option value="Hrana">Hrana</option>
            <option value="Stanovanje">Stanovanje</option>
            <option value="Režije">Režije</option>
            <option value="Prijevoz">Prijevoz</option>
            <option value="Odjeća i obuća">Odjeća i obuća</option>
            <option value="Zdravlje">Zdravlje</option>
            <option value="Zabava">Zabava</option>
            <option value="Obrazovanje">Obrazovanje</option>
            <option value="Dugovi">Dugovi</option>
            <option value="Pokloni">Pokloni</option>
            <option value="Ljubimci">Ljubimci</option>
            <option value="Ostalo">Ostalo</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="description">Opis (opcionalno)</label>
          <input type="text" id="description" class="form-control">
        </div>
        
        <div class="form-group">
          <label for="date">Datum</label>
          <input type="date" id="date" class="form-control" required>
        </div>
        
        <div class="form-group">
          <label>
            <input type="checkbox" id="isRecurring"> Ponavljajući trošak
          </label>
        </div>
        
        <div class="recurring-options" id="recurringOptions">
          <div class="form-group">
            <label for="recurrenceInterval">Interval ponavljanja</label>
            <select id="recurrenceInterval" class="form-control">
              <option value="monthly">Mjesečno</option>
              <option value="weekly">Tjedno</option>
              <option value="yearly">Godišnje</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="recurrenceEndDate">Završni datum (opcionalno)</label>
            <input type="date" id="recurrenceEndDate" class="form-control">
          </div>
        </div>
        
        <button type="submit" class="btn btn-danger">Dodaj trošak</button>
      </form>
    </div>
    
    <div class="expense-list">
      <h2>Tvoji troškovi</h2>
      <div id="expensesList"></div>
    </div>
  </div>

  <script src="js/auth.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const token = localStorage.getItem('token');
      const userId = localStorage.getItem('userId');
      
      if (!token || !userId) {
        alert('Niste prijavljeni!');
        window.location.href = 'login.html';
        return;
      }
      
      // Postavi današnji datum kao default
      document.getElementById('date').valueAsDate = new Date();
      
      // Prikaži/sakrij opcije za ponavljajuće troškove
      document.getElementById('isRecurring').addEventListener('change', function() {
        document.getElementById('recurringOptions').style.display = 
          this.checked ? 'block' : 'none';
      });
      
      fetchExpenses();
    });

    async function fetchExpenses() {
      try {
        const response = await fetch(`http://localhost:3000/expenses?user_id=${localStorage.getItem('userId')}`, {
          headers: getAuthHeader()
        });
        
        if (!response.ok) {
          throw new Error('Greška pri dohvaćanju troškova');
        }
        
        const expenses = await response.json();
        displayExpenses(expenses);
      } catch (error) {
        console.error(error);
        alert(error.message);
      }
    }

    function displayExpenses(expenses) {
      const expensesList = document.getElementById('expensesList');
      
      if (expenses.length === 0) {
        expensesList.innerHTML = '<p>Nema unesenih troškova.</p>';
        return;
      }
      
      expensesList.innerHTML = '';
      
      expenses.forEach(expense => {
        const expenseItem = document.createElement('div');
        expenseItem.className = 'expense-item';
        
        const formattedDate = new Date(expense.date).toLocaleDateString('hr-HR');
        const formattedAmount = parseFloat(expense.amount).toFixed(2) + ' €';
        
        expenseItem.innerHTML = `
          <div class="expense-info">
            <div>
              <span class="expense-category">${expense.category}</span>
              ${expense.is_recurring ? '<span class="recurring-badge">Ponavljajući</span>' : ''}
              <span class="expense-amount">${formattedAmount}</span>
            </div>
            <div class="expense-date">${formattedDate}</div>
            ${expense.description ? `<div class="expense-description">${expense.description}</div>` : ''}
          </div>
          <div class="expense-actions">
            <button class="btn btn-danger" onclick="deleteExpense(${expense.id})">Obriši</button>
          </div>
        `;
        
        expensesList.appendChild(expenseItem);
      });
    }

    document.getElementById('expenseForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const amount = document.getElementById('amount').value;
      const category = document.getElementById('category').value;
      const description = document.getElementById('description').value;
      const date = document.getElementById('date').value;
      const isRecurring = document.getElementById('isRecurring').checked;
      const recurrenceInterval = isRecurring ? document.getElementById('recurrenceInterval').value : null;
      const recurrenceEndDate = isRecurring ? document.getElementById('recurrenceEndDate').value : null;
      
      try {
        const response = await fetch('http://localhost:3000/expenses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          },
          body: JSON.stringify({
            user_id: localStorage.getItem('userId'),
            amount,
            category,
            description,
            date,
            is_recurring: isRecurring,
            recurrence_interval: recurrenceInterval,
            recurrence_end_date: recurrenceEndDate
          })
        });
        
        if (!response.ok) {
          throw new Error('Greška pri dodavanju troška');
        }
        
        // Očisti formu i osvježi listu
        document.getElementById('expenseForm').reset();
        document.getElementById('date').valueAsDate = new Date();
        document.getElementById('recurringOptions').style.display = 'none';
        fetchExpenses();
        
      } catch (error) {
        console.error(error);
        alert(error.message);
      }
    });

    async function deleteExpense(id) {
      if (!confirm('Jeste li sigurni da želite obrisati ovaj trošak?')) {
        return;
      }
      
      try {
        const response = await fetch(`http://localhost:3000/expenses/${id}`, {
          method: 'DELETE',
          headers: getAuthHeader()
        });
        
        if (!response.ok) {
          throw new Error('Greška pri brisanju troška');
        }
        
        fetchExpenses();
      } catch (error) {
        console.error(error);
        alert(error.message);
      }
    }
  </script>
</body>
</html>

public/income.html
<!DOCTYPE html>
<html lang="hr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Upravljanje Prihodima</title>
  <link rel="stylesheet" href="css/style.css">
  <style>
    .income-container {
      max-width: 800px;
      margin: 2rem auto;
      padding: 2rem;
    }
    
    .income-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }
    
    .income-form {
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 2rem;
    }
    
    .income-list {
      background: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .income-item {
      display: flex;
      justify-content: space-between;
      padding: 1rem 0;
      border-bottom: 1px solid #eee;
      align-items: center;
    }
    
    .income-item:last-child {
      border-bottom: none;
    }
    
    .income-info {
      flex: 1;
    }
    
    .income-amount {
      font-weight: bold;
      color: var(--secondary);
    }
    
    .income-date {
      color: var(--gray-dark);
      font-size: 0.9rem;
    }
    
    .income-description {
      color: #666;
    }
    
    .income-actions {
      margin-left: 1rem;
    }

    .recurring-options {
      margin-top: 1rem;
      padding: 1rem;
      background: #f8f9fa;
      border-radius: 4px;
      display: none;
    }

    .recurring-badge {
      display: inline-block;
      padding: 0.2rem 0.5rem;
      background: #9b59b6;
      border-radius: 12px;
      font-size: 0.8rem;
      color: white;
      margin-left: 0.5rem;
    }
  </style>
</head>
<body>
  <div class="income-container">
    <div class="income-header">
      <h1>Upravljanje Prihodima</h1>
      <button class="btn btn-primary" onclick="window.location.href='dashboard.html'">← Povratak</button>
    </div>
    
    <div class="income-form">
      <h2>Dodaj Novi Prihod</h2>
      <form id="incomeForm">
        <div class="form-group">
          <label for="amount">Iznos (€)</label>
          <input type="number" step="0.01" id="amount" class="form-control" required>
        </div>
        
        <div class="form-group">
          <label for="description">Opis (opcionalno)</label>
          <input type="text" id="description" class="form-control">
        </div>
        
        <div class="form-group">
          <label for="date">Datum</label>
          <input type="date" id="date" class="form-control" required>
        </div>

        <div class="form-group">
          <label>
            <input type="checkbox" id="isRecurring"> Ponavljajući prihod
          </label>
        </div>
        
        <div class="recurring-options" id="recurringOptions">
          <div class="form-group">
            <label for="recurrenceInterval">Interval ponavljanja</label>
            <select id="recurrenceInterval" class="form-control">
              <option value="monthly">Mjesečno</option>
              <option value="weekly">Tjedno</option>
              <option value="yearly">Godišnje</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="recurrenceEndDate">Završni datum (opcionalno)</label>
            <input type="date" id="recurrenceEndDate" class="form-control">
          </div>
        </div>
        
        <button type="submit" class="btn btn-secondary">Dodaj Prihod</button>
      </form>
    </div>
    
    <div class="income-list">
      <h2>Tvoji Prihodi</h2>
      <div id="incomeList"></div>
    </div>
  </div>

  <script src="js/auth.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const token = localStorage.getItem('token');
      const userId = localStorage.getItem('userId');
      
      if (!token || !userId) {
        alert('Niste prijavljeni!');
        window.location.href = 'login.html';
        return;
      }
      
      // Postavi današnji datum kao default
      document.getElementById('date').valueAsDate = new Date();
      
      // Prikaži/sakrij opcije za ponavljajuće prihode
      document.getElementById('isRecurring').addEventListener('change', function() {
        document.getElementById('recurringOptions').style.display = 
          this.checked ? 'block' : 'none';
      });
      
      loadIncome();
    });

    async function loadIncome() {
      try {
        const token = localStorage.getItem('token');
        const userId = localStorage.getItem('userId');
        
        const response = await fetch(`http://localhost:3000/income?user_id=${userId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!response.ok) {
          throw new Error('Greška pri dohvaćanju prihoda');
        }
        
        const income = await response.json();
        displayIncome(income);
      } catch (error) {
        console.error(error);
        alert(error.message);
      }
    }

    function displayIncome(income) {
      const incomeList = document.getElementById('incomeList');
      
      if (income.length === 0) {
        incomeList.innerHTML = '<p>Nema unesenih prihoda.</p>';
        return;
      }
      
      incomeList.innerHTML = '';
      
      income.forEach(item => {
        const incomeItem = document.createElement('div');
        incomeItem.className = 'income-item';
        
        const formattedDate = new Date(item.date).toLocaleDateString('hr-HR');
        const formattedAmount = parseFloat(item.amount).toFixed(2) + ' €';
        
        incomeItem.innerHTML = `
          <div class="income-info">
            <div>
              <span class="income-amount">${formattedAmount}</span>
              ${item.is_recurring ? '<span class="recurring-badge">Ponavljajući</span>' : ''}
            </div>
            <div class="income-date">${formattedDate}</div>
            ${item.description ? `<div class="income-description">${item.description}</div>` : ''}
          </div>
          <div class="income-actions">
            <button class="btn btn-danger" onclick="deleteIncome(${item.id})">Obriši</button>
          </div>
        `;
        
        incomeList.appendChild(incomeItem);
      });
    }

    document.getElementById('incomeForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const amount = document.getElementById('amount').value;
      const description = document.getElementById('description').value;
      const date = document.getElementById('date').value;
      const isRecurring = document.getElementById('isRecurring').checked;
      const recurrenceInterval = isRecurring ? document.getElementById('recurrenceInterval').value : null;
      const recurrenceEndDate = isRecurring ? document.getElementById('recurrenceEndDate').value : null;
      
      try {
        const token = localStorage.getItem('token');
        const userId = localStorage.getItem('userId');
        
        const response = await fetch('http://localhost:3000/income', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            user_id: userId,
            amount,
            description,
            date,
            is_recurring: isRecurring,
            recurrence_interval: recurrenceInterval,
            recurrence_end_date: recurrenceEndDate
          })
        });
        
        if (!response.ok) {
          throw new Error('Greška pri dodavanju prihoda');
        }
        
        // Očisti formu i osvježi listu
        document.getElementById('incomeForm').reset();
        document.getElementById('date').valueAsDate = new Date();
        document.getElementById('recurringOptions').style.display = 'none';
        loadIncome();
        
      } catch (error) {
        console.error(error);
        alert(error.message);
      }
    });

    async function deleteIncome(id) {
      if (!confirm('Jeste li sigurni da želite obrisati ovaj prihod?')) {
        return;
      }
      
      try {
        const token = localStorage.getItem('token');
        
        const response = await fetch(`http://localhost:3000/income/${id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Greška pri brisanju prihoda');
        }
        
        loadIncome();
      } catch (error) {
        console.error(error);
        alert(error.message);
      }
    }
  </script>
</body>
</html>

public/login.html
<!DOCTYPE html>
<html lang="hr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Prijava</title>
  <link rel="stylesheet" href="css/style.css">
</head>
<body>
  <div class="container">
    <div class="card">
      <h2>Prijava</h2>
      <form id="loginForm">
        <div class="form-group">
          <label for="username">Korisničko ime</label>
          <input type="text" id="username" class="form-control" required>
        </div>
        
        <div class="form-group">
          <label for="password">Lozinka</label>
          <input type="password" id="password" class="form-control" required>
        </div>
        
        <button type="submit" class="btn btn-primary">Prijavi se</button>
      </form>
      
      <p style="margin-top: 1rem;">Nemaš račun? <a href="register.html">Registriraj se</a></p>
      <div id="message"></div>
    </div>
  </div>
  <script src="js/login.js"></script>
</body>
</html>

public/recurring.html
<!DOCTYPE html>
<html lang="hr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ponavljajući Troškovi i Prihodi</title>
  <style>
    /* Osnovni stilovi za funkcionalnost - preuzeto iz vašeg primjera */
    body {
      font-family: sans-serif;
      margin: 20px;
      background-color: #f9f9f9;
    }
    .container {
      max-width: 900px;
      margin: auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    h1, h2 {
        color: #333;
    }
    .btn {
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-right: 5px;
        text-decoration: none; /* Za linkove koji izgledaju kao gumbi */
        display: inline-block; /* Za pravilno poravnanje */
    }
    .btn-primary { background-color: #007bff; color: white; }
    .btn-secondary { background-color: #6c757d; color: white; }
    .btn-danger { background-color: #dc3545; color: white; }
    .btn-warning { background-color: #ffc107; color: black; }
    .btn-success {
      background-color: #28a745;
      color: white;
    }
    .btn-success:hover {
       background-color: #218838;
    }

    .tabs {
      display: flex;
      margin-bottom: 1rem;
      border-bottom: 1px solid #ddd;
    }

    .tab {
      padding: 10px 20px;
      cursor: pointer;
      border: 1px solid transparent;
      background: #f5f5f5;
      margin-right: 5px;
      border-radius: 5px 5px 0 0;
      transition: background-color 0.3s ease;
    }

    .tab.active {
      background: white;
      border-color: #ddd;
      border-bottom-color: white;
      font-weight: bold;
    }

    .tab:hover:not(.active) {
        background-color: #eee;
    }

    .tab-content {
      display: none;
      padding: 20px;
      background: white;
      border: 1px solid #ddd;
      border-top: none;
      border-radius: 0 0 5px 5px;
    }

    .tab-content.active {
      display: block;
    }

    .recurring-item {
      background: white;
      padding: 15px;
      margin-bottom: 10px;
      border-radius: 5px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.08);
      border-left: 4px solid #3498db;
    }

    .recurring-item.expense {
      border-left-color: #e74c3c; /* Crvena za troškove */
    }

    .recurring-item.income {
      border-left-color: #2ecc71; /* Zelena za prihode */
    }

    .recurring-item h3 {
        margin-top: 0;
        margin-bottom: 10px;
        color: #555;
    }
     .recurring-item p {
        margin: 5px 0;
        font-size: 14px;
        color: #666;
    }
     .recurring-item p strong {
        color: #444;
    }

    .recurring-actions {
      margin-top: 15px;
      display: flex;
      gap: 10px;
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      overflow-y: auto; /* Omogućava skrolanje ako je sadržaj predug */
    }

    .modal-content {
      background-color: white;
      margin: 8% auto; /* Malo podignuto */
      padding: 25px;
      border-radius: 5px;
      width: 90%;
      max-width: 550px; /* Malo uže */
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .form-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 25px; /* Malo veći razmak */
      border-top: 1px solid #eee; /* Linija iznad gumba */
      padding-top: 15px; /* Razmak iznad gumba */
    }

    .mt-3 {
      margin-top: 1rem;
    }

    .alert {
      padding: 15px; /* Malo veći padding */
      margin-bottom: 20px; /* Malo veći razmak */
      border-radius: 4px;
      border: 1px solid transparent;
      font-weight: 500;
    }

    .alert-success {
      background-color: #d4edda;
      color: #155724;
      border-color: #c3e6cb;
    }

    .alert-error {
      background-color: #f8d7da;
      color: #721c24;
      border-color: #f5c6cb;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
      color: #555;
    }

    .form-control {
      width: 100%;
      padding: 10px; /* Malo veći padding */
      border: 1px solid #ddd;
      border-radius: 4px;
      box-sizing: border-box; /* Da padding ne širi element */
      font-size: 14px;
    }
    .form-control:focus {
        border-color: #007bff;
        outline: none;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }
    select.form-control {
        appearance: none; /* Sakrij default strelicu */
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='none' stroke='%23333' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3E%3C/svg%3E"); /* Dodaj custom strelicu */
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 1em;
        padding-right: 30px; /* Napravi mjesta za strelicu */
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Ponavljajući Troškovi i Prihodi</h1>
    <button class="btn btn-secondary" style="margin-bottom: 15px;" onclick="window.location.href='dashboard.html'">← Povratak</button>

    <div id="alertContainer"></div>

    <div class="tabs">
      <div class="tab active" data-tab="expenses">Troškovi</div>
      <div class="tab" data-tab="income">Prihodi</div>
    </div>

    <div id="expensesTab" class="tab-content active">
      <h2>Ponavljajući Troškovi</h2>
      <button class="btn btn-danger" onclick="showAddForm('expense')">+ Dodaj Ponavljajući Trošak</button>
      <div id="expensesList" class="mt-3">
          <p>Učitavanje troškova...</p>
      </div>
    </div>

    <div id="incomeTab" class="tab-content">
      <h2>Ponavljajući Prihodi</h2>
      <button class="btn btn-success" onclick="showAddForm('income')">+ Dodaj Ponavljajući Prihod</button> <div id="incomeList" class="mt-3">
          <p>Učitavanje prihoda...</p>
      </div>
    </div>
  </div>

  <div id="recurringModal" class="modal">
    <div class="modal-content">
      <h2 id="modalTitle">Dodaj Ponavljajući Trošak</h2>
      <form id="recurringForm">
        <input type="hidden" id="itemType">
        <input type="hidden" id="itemId">

        <div class="form-group">
          <label for="amount">Iznos (€) *</label>
          <input type="number" step="0.01" id="amount" class="form-control" required placeholder="Unesite iznos">
        </div>

        <div class="form-group" id="categoryGroup">
          <label for="category">Kategorija *</label>
          <select id="category" class="form-control" required>
            <option value="">Odaberi kategoriju</option>
            <option value="Hrana">Hrana</option>
            <option value="Stanovanje">Stanovanje</option>
            <option value="Režije">Režije</option>
            <option value="Prijevoz">Prijevoz</option>
            <option value="Odjeća i obuća">Odjeća i obuća</option>
            <option value="Zdravlje">Zdravlje</option>
            <option value="Zabava">Zabava</option>
            <option value="Obrazovanje">Obrazovanje</option>
            <option value="Dugovi">Dugovi</option>
            <option value="Pokloni">Pokloni</option>
            <option value="Ljubimci">Ljubimci</option>
            <option value="Ostalo">Ostalo</option>
          </select>
        </div>

        <div class="form-group">
          <label for="description">Opis (opcionalno)</label>
          <input type="text" id="description" class="form-control">
        </div>

        <div class="form-group">
          <label for="startDate">Početni datum *</label>
          <input type="date" id="startDate" class="form-control" required>
        </div>

        <div class="form-group">
          <label for="interval">Interval ponavljanja *</label>
          <select id="interval" class="form-control" required>
            <option value="">Odaberi interval</option>
            <option value="daily">Dnevno</option>
            <option value="weekly">Tjedno</option>
            <option value="monthly">Mjesečno</option>
            <option value="yearly">Godišnje</option>
          </select>
        </div>

        <div class="form-group">
          <label for="endDate">Završni datum (opcionalno)</label>
          <input type="date" id="endDate" class="form-control">
        </div>

        <div class="form-actions">
          <button type="button" class="btn btn-secondary" onclick="hideModal()">Odustani</button>
          <button type="submit" class="btn btn-primary">Spremi</button>
        </div>
      </form>
    </div>
  </div>

  <script src="js/auth.js"></script>
  <script>
    // Helper funkcija za dohvaćanje auth headera (pretpostavka iz auth.js)
    function getAuthHeader() {
        const token = localStorage.getItem('token');
        if (!token) {
            console.error("Token nije pronađen.");
            // Ovdje eventualno preusmjeriti na login
            // window.location.href = 'login.html';
            return {};
        }
        return { 'Authorization': `Bearer ${token}` };
    }

    // Helper funkcija za provjeru autentifikacije (pretpostavka iz auth.js)
    function checkAuth() {
        const token = localStorage.getItem('token');
        if (!token) {
            console.warn("Korisnik nije prijavljen. Preusmjeravam na login.");
            // window.location.href = 'login.html'; // Odkomentirajte za automatsko preusmjeravanje
            return false;
        }
        return true;
    }


    document.addEventListener('DOMContentLoaded', () => {
      if (!checkAuth()) return;

      // Postavi današnji datum kao default za početni datum
       try {
         document.getElementById('startDate').valueAsDate = new Date();
       } catch(e) {
         console.error("Greška pri postavljanju datuma:", e);
         // Fallback ako valueAsDate nije podržan ili ne radi
         const today = new Date();
         const year = today.getFullYear();
         const month = String(today.getMonth() + 1).padStart(2, '0');
         const day = String(today.getDate()).padStart(2, '0');
         document.getElementById('startDate').value = `${year}-${month}-${day}`;
       }

      // Tab funkcionalnost
      document.querySelectorAll('.tab').forEach(tab => {
        tab.addEventListener('click', () => {
          document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
          document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));

          tab.classList.add('active');
          const activeTabContent = document.getElementById(`${tab.dataset.tab}Tab`);
          if (activeTabContent) {
            activeTabContent.classList.add('active');

             // Učitaj podatke za aktivni tab
             if (tab.dataset.tab === 'expenses') {
               loadRecurringExpenses();
             } else if (tab.dataset.tab === 'income') {
               loadRecurringIncome();
             }
          } else {
              console.error(`Tab content for ${tab.dataset.tab} not found.`);
          }
        });
      });

      // Učitaj početne podatke (za tab koji je inicijalno aktivan)
      loadRecurringExpenses();
    });

    function showAlert(message, type = 'success') {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type}`;
      alertDiv.textContent = message;
      // Dodaj gumb za zatvaranje
      const closeButton = document.createElement('button');
      closeButton.innerHTML = '&times;'; // HTML entitet za 'x'
      closeButton.style.cssText = 'float:right; background:none; border:none; font-size: 1.2em; line-height: 1; cursor:pointer; margin-left: 15px;';
      closeButton.onclick = () => alertDiv.remove();
      alertDiv.appendChild(closeButton);


      const container = document.getElementById('alertContainer');
      // Ukloni postojeće poruke prije dodavanja nove
      while (container.firstChild) {
           container.removeChild(container.firstChild);
       }
      container.appendChild(alertDiv);

      // Automatski ukloni poruku nakon 5 sekundi (opcionalno)
      setTimeout(() => {
        if (alertDiv.parentNode === container) { // Provjeri je li još uvijek tu
             alertDiv.remove();
        }
      }, 5000);
    }

    // --- FUNKCIJE ZA DOHVAĆANJE I PRIKAZ ---

    async function loadRecurringExpenses() {
        await loadRecurringData('expense', 'expensesList', 'http://localhost:3000/expenses/recurring');
    }

    async function loadRecurringIncome() {
        await loadRecurringData('income', 'incomeList', 'http://localhost:3000/income/recurring');
    }

    async function loadRecurringData(type, listId, url) {
        const listContainer = document.getElementById(listId);
        if (!listContainer) {
            console.error(`List container with id ${listId} not found.`);
            return;
        }
        listContainer.innerHTML = '<p>Učitavanje...</p>'; // Poruka dok se podaci učitavaju

        try {
            const response = await fetch(url, {
                headers: getAuthHeader()
            });

            if (response.status === 401) {
                 showAlert('Vaša sesija je istekla. Molimo prijavite se ponovno.', 'error');
                 // Ovdje eventualno preusmjeriti na login
                 // window.location.href = 'login.html';
                 return;
             }
             if (!response.ok) {
                 const errorData = await response.json().catch(() => ({ error: `HTTP greška ${response.status}` }));
                 throw new Error(errorData.error || `Greška pri učitavanju ${type === 'expense' ? 'troškova' : 'prihoda'}`);
             }

            const items = await response.json();
            displayRecurringItems(items, listId, type);
        } catch (error) {
            console.error(`Error loading recurring ${type}:`, error);
            showAlert(error.message, 'error');
            listContainer.innerHTML = `<p style="color: red;">Greška pri učitavanju ${type === 'expense' ? 'troškova' : 'prihoda'}.</p>`;
        }
    }


    function displayRecurringItems(items, containerId, type) {
      const container = document.getElementById(containerId);
       if (!container) {
            console.error(`Container with id ${containerId} not found for displaying items.`);
            return;
        }

      if (!Array.isArray(items)) {
           console.error("Očekivani podaci nisu polje (array):", items);
           container.innerHTML = `<p style="color: red;">Došlo je do greške pri prikazu podataka.</p>`;
           return;
       }

      if (items.length === 0) {
        container.innerHTML = `<p>Nema zapisa o ponavljajućim ${type === 'expense' ? 'troškovima' : 'prihodima'}.</p>`;
        return;
      }

      container.innerHTML = ''; // Očisti prethodni sadržaj

      const intervalMap = {
        daily: 'Dnevno',
        weekly: 'Tjedno',
        monthly: 'Mjesečno',
        yearly: 'Godišnje'
      };

      items.forEach(item => {
        const itemEl = document.createElement('div');
        itemEl.className = `recurring-item ${type}`; // Klasa 'expense' ili 'income'

        const formatDate = (dateString) => {
            if (!dateString) return 'Nije postavljen';
            try {
                // Očekuje se YYYY-MM-DD format iz baze
                return new Date(dateString).toLocaleDateString('hr-HR', { day: '2-digit', month: '2-digit', year: 'numeric' });
            } catch (e) {
                console.error("Greška pri formatiranju datuma:", dateString, e);
                return 'Nevažeći datum';
            }
        };

        const endDateText = item.recurrence_end_date ? formatDate(item.recurrence_end_date) : 'Nema';

        // Sanitizacija opisa da se spriječi XSS ako opis dolazi direktno iz korisničkog unosa
        const safeDescription = document.createElement('span');
        safeDescription.textContent = item.description || (type === 'expense' ? 'Trošak bez opisa' : 'Prihod bez opisa');

        itemEl.innerHTML = `
          <h3>${safeDescription.innerHTML}</h3>
          <p><strong>Iznos:</strong> ${parseFloat(item.amount).toLocaleString('hr-HR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} €</p>
          ${type === 'expense' ? `<p><strong>Kategorija:</strong> ${item.category || 'Nema kategorije'}</p>` : ''}
          <p><strong>Početak ponavljanja:</strong> ${formatDate(item.date)}</p>
          <p><strong>Interval:</strong> ${intervalMap[item.recurrence_interval] || 'Nepoznat interval'}</p>
          <p><strong>Završava:</strong> ${endDateText}</p>

          <div class="recurring-actions">
            <button class="btn btn-warning btn-sm" onclick="editRecurringItem('${type}', '${item.id}', \`${item.description || ''}\`, ${item.amount}, '${item.category || ''}', '${item.date ? item.date.split('T')[0] : ''}', '${item.recurrence_interval}', '${item.recurrence_end_date ? item.recurrence_end_date.split('T')[0] : ''}')">Uredi</button>
            <button class="btn btn-danger btn-sm" onclick="deleteRecurringItem('${type}', '${item.id}')">Obriši</button>
          </div>
        `;
        // Korištenje `` (backticks) za opis kako bi se handleali navodnici unutar opisa
        // Korištenje .split('T')[0] da se osigura YYYY-MM-DD format za date input polja

        container.appendChild(itemEl);
      });
    }

    // --- FUNKCIJE ZA MODAL I FORMU ---

    function showAddForm(type) {
      document.getElementById('recurringForm').reset(); // Resetiraj formu
      document.getElementById('itemType').value = type;
      document.getElementById('itemId').value = ''; // Obriši ID jer dodajemo novi

      document.getElementById('modalTitle').textContent =
        `Dodaj Ponavljajući ${type === 'expense' ? 'Trošak' : 'Prihod'}`;

      // Pokaži/sakrij polje za kategoriju
      document.getElementById('categoryGroup').style.display =
        type === 'expense' ? 'block' : 'none';
      document.getElementById('category').required = (type === 'expense'); // Postavi required ovisno o tipu


       // Postavi današnji datum kao default za početni datum
       try {
         document.getElementById('startDate').valueAsDate = new Date();
       } catch(e) {
         console.error("Greška pri postavljanju datuma:", e);
         const today = new Date();
         const year = today.getFullYear();
         const month = String(today.getMonth() + 1).padStart(2, '0');
         const day = String(today.getDate()).padStart(2, '0');
         document.getElementById('startDate').value = `${year}-${month}-${day}`;
       }
       document.getElementById('endDate').value = ''; // Očisti završni datum

      document.getElementById('recurringModal').style.display = 'block';
    }

    function editRecurringItem(type, id, description, amount, category, startDate, interval, endDate) {
      document.getElementById('recurringForm').reset(); // Resetiraj prvo
      document.getElementById('itemType').value = type;
      document.getElementById('itemId').value = id; // Postavi ID za uređivanje

      document.getElementById('modalTitle').textContent =
        `Uredi Ponavljajući ${type === 'expense' ? 'Trošak' : 'Prihod'}`;

      document.getElementById('categoryGroup').style.display =
        type === 'expense' ? 'block' : 'none';
       document.getElementById('category').required = (type === 'expense');

      // Popuni polja s postojećim vrijednostima
      document.getElementById('amount').value = amount;
      document.getElementById('description').value = description || '';
      document.getElementById('startDate').value = startDate || ''; // Već bi trebao biti YYYY-MM-DD
      document.getElementById('interval').value = interval || '';
      document.getElementById('endDate').value = endDate || ''; // Već bi trebao biti YYYY-MM-DD

      if (type === 'expense') {
        document.getElementById('category').value = category || '';
      }

      document.getElementById('recurringModal').style.display = 'block';
    }

     function hideModal() {
      const modal = document.getElementById('recurringModal');
       if (modal) {
            modal.style.display = 'none';
        }
    }

    // --- FUNKCIJE ZA SPREMANJE I BRISANJE (API POZIVI) ---

    async function deleteRecurringItem(type, id) {
      if (!confirm(`Jeste li sigurni da želite trajno obrisati ovaj ponavljajući ${type === 'expense' ? 'trošak' : 'prihod'}?`)) return;

      const url = type === 'expense'
          ? `http://localhost:3000/expenses/${id}`
          : `http://localhost:3000/income/${id}`;

      try {
          const response = await fetch(url, {
              method: 'DELETE',
              headers: getAuthHeader()
          });

         if (response.status === 401) {
             showAlert('Vaša sesija je istekla. Molimo prijavite se ponovno.', 'error');
             return;
         }

          if (!response.ok) {
               const errorData = await response.json().catch(() => ({ error: `HTTP greška ${response.status}` }));
               throw new Error(errorData.error || 'Greška pri brisanju');
          }

          showAlert(`Ponavljajući ${type === 'expense' ? 'trošak' : 'prihod'} uspješno obrisan!`);

          // Osvježi listu
          if (type === 'expense') {
              loadRecurringExpenses();
          } else {
              loadRecurringIncome();
          }
      } catch (error) {
          console.error(`Error deleting recurring ${type}:`, error);
          showAlert(error.message, 'error');
      }
    }


    // Event listener za SUBMIT forme
    document.getElementById('recurringForm').addEventListener('submit', async (e) => {
      e.preventDefault(); // Zaustavi defaultno slanje forme

      const type = document.getElementById('itemType').value;
      const id = document.getElementById('itemId').value; // ID za update, prazan za create
      const amount = document.getElementById('amount').value;
      const category = document.getElementById('category').value;
      const description = document.getElementById('description').value;
      const startDate = document.getElementById('startDate').value;
      const interval = document.getElementById('interval').value;
      const endDate = document.getElementById('endDate').value || null; // null ako je prazno

      // --- Osnovna validacija ---
      let isValid = true;
      let errorMsg = '';

      if (!amount || parseFloat(amount) <= 0) {
          errorMsg += 'Iznos mora biti pozitivan broj. ';
          isValid = false;
      }
      if (!startDate) {
          errorMsg += 'Početni datum je obavezan. ';
          isValid = false;
      }
      if (!interval) {
           errorMsg += 'Interval ponavljanja je obavezan. ';
           isValid = false;
       }
       if (type === 'expense' && !category) {
           errorMsg += 'Kategorija je obavezna za trošak. ';
           isValid = false;
       }
       // Provjera da završni datum nije prije početnog
        if (endDate && startDate && new Date(endDate) < new Date(startDate)) {
             errorMsg += 'Završni datum ne može biti prije početnog datuma. ';
             isValid = false;
         }


      if (!isValid) {
          showAlert(errorMsg.trim(), 'error');
          return;
      }
      // --- Kraj validacije ---


      // Određivanje URL-a i metode (POST za novi, PUT za postojeći)
      const url = id
        ? (type === 'expense'
            ? `http://localhost:3000/expenses/${id}`
            : `http://localhost:3000/income/${id}`)
        : (type === 'expense'
            ? 'http://localhost:3000/expenses'
            : 'http://localhost:3000/income');

      const method = id ? 'PUT' : 'POST';

      // Priprema tijela zahtjeva
      const body = {
        amount: parseFloat(amount),
        description: description.trim() || null, // null ako je prazan string nakon trimanja
        date: startDate,             // Početni datum postaje 'date' u bazi
        isRecurring: true,           // Ovo je ključno za backend da zna da je ponavljajući
        recurrenceInterval: interval,
        recurrenceEndDate: endDate
      };

      if (type === 'expense') {
        body.category = category;
      }

      // Slanje zahtjeva
      try {
          const response = await fetch(url, {
              method,
              headers: {
                  'Content-Type': 'application/json',
                  ...getAuthHeader() // Uključi autorizacijski header
              },
              body: JSON.stringify(body)
          });

         if (response.status === 401) {
             showAlert('Vaša sesija je istekla. Molimo prijavite se ponovno.', 'error');
             return; // Ne nastavljaj dalje
         }

          if (!response.ok) {
              // Pokušaj pročitati poruku o grešci iz odgovora servera
              const errorData = await response.json().catch(() => ({ error: `Greška ${response.status} pri komunikaciji sa serverom.` }));
              throw new Error(errorData.error || `Greška pri ${id ? 'ažuriranju' : 'spremanju'} ${type === 'expense' ? 'troška' : 'prihoda'}.`);
          }

          const result = await response.json(); // Server bi trebao vratiti poruku o uspjehu
          showAlert(result.message || `Ponavljajući ${type === 'expense' ? 'trošak' : 'prihod'} uspješno ${id ? 'ažuriran' : 'spremljen'}!`);
          hideModal(); // Sakrij modal nakon uspješnog spremanja

          // Osvježi odgovarajuću listu
          if (type === 'expense') {
              loadRecurringExpenses();
          } else {
              loadRecurringIncome();
          }

      } catch (error) {
          console.error('Greška kod spremanja forme:', error);
          showAlert(error.message, 'error'); // Pokaži grešku korisniku
      }
    });

    // Zatvori modal klikom na pozadinu
    window.addEventListener('click', (e) => {
      const modal = document.getElementById('recurringModal');
      if (e.target === modal) { // Ako je kliknuto direktno na pozadinu modala
        hideModal();
      }
    });

  </script>
</body>
</html>

public/register.html
<!DOCTYPE html>
<html lang="hr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Registracija</title>
  <link rel="stylesheet" href="css/style.css">
</head>
<body>
  <div class="container">
    <div class="card">
      <h2>Registracija</h2>
      <form id="registerForm">
        <div class="form-group">
          <label for="username">Korisničko ime</label>
          <input type="text" id="username" class="form-control" required>
        </div>
        
        <div class="form-group">
          <label for="password">Lozinka</label>
          <input type="password" id="password" class="form-control" required minlength="6">
        </div>
        
        <div class="form-group">
          <label for="confirmPassword">Potvrdi lozinku</label>
          <input type="password" id="confirmPassword" class="form-control" required>
        </div>
        
        <button type="submit" class="btn btn-primary">Registriraj se</button>
      </form>
      
      <p style="margin-top: 1rem;">Već imaš račun? <a href="login.html">Prijavi se</a></p>
      <div id="message"></div>
    </div>
  </div>

  <script>
    document.getElementById('registerForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const messageElement = document.getElementById('message');
      
      // Validacija
      if (password !== confirmPassword) {
        messageElement.innerHTML = '<div class="alert alert-error">Lozinke se ne podudaraju!</div>';
        return;
      }
      
      if (password.length < 6) {
        messageElement.innerHTML = '<div class="alert alert-error">Lozinka mora imati najmanje 6 znakova!</div>';
        return;
      }
      
      try {
        const response = await fetch('http://localhost:3000/users/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, password })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Došlo je do greške pri registraciji');
        }
        
        messageElement.innerHTML = `<div class="alert alert-success">${data.message} Preusmjeravanje na prijavu...</div>`;
        
        setTimeout(() => {
          window.location.href = 'login.html';
        }, 2000);
      } catch (error) {
        console.error(error);
        messageElement.innerHTML = `<div class="alert alert-error">${error.message}</div>`;
      }
    });
  </script>
</body>
</html>